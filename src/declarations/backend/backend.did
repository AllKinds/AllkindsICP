type WeightKind = variant {
	Dislike : nat;
	Like : nat;
};
type UserMatch = record {
	about : opt text;
	answeredQuestions : vec Question;
	birth : opt int;
	cohesion : int;
	connect : opt text;
	gender : opt Gender;
	"principal" : principal;
	username : text;
};
type User = record {
	about : record {
		opt text;
		bool;
	};
	birth : record {
		opt int;
		bool;
	};
	connect : record {
		opt text;
		bool;
	};
	created : int;
	gender : record {
		opt Gender;
		bool;
	};
	points : nat;
	username : text;
};
type Result_4 = variant {
	err : text;
	ok : UserMatch;
};
type Result_3 = variant {
	err : text;
	ok : vec Question;
};
type Result_2 = variant {
	err : text;
	ok : vec Friend;
};
type Result_1 = variant {
	err : text;
	ok : User;
};
type Result = variant {
	err : text;
	ok;
};
type Question = record {
	color : opt Color;
	created : int;
	creater : principal;
	hash : Hash;
	points : int;
	question : text;
};
type MatchingFilter = record {
	ageRange : record {
		nat;
		nat;
	};
	cohesion : int;
	gender : opt Gender;
};
type Hash = nat32;
type Gender = variant {
	Female;
	Male;
	Other;
	Queer;
};
type FriendStatus = variant {
	Approved;
	Requested;
	Waiting;
};
type Friend = record {
	account : principal;
	status : opt FriendStatus;
};
type Color = variant { Default };
type AnswerKind = variant { Bool : bool };
service : {
	answerFriendRequest : (principal, bool) -> (Result);
	createQuestion : (text) -> (Result);
	createUser : (text) -> (Result);
	findMatch : (MatchingFilter) -> (Result_4);
	getAnsweredQuestions : (opt nat) -> (Result_3) query;
	getAskableQuestions : (nat) -> (Result_3) query;
	getFriends : () -> (Result_2) query;
	getUser : () -> (Result_1) query;
	sendFriendRequest : (principal) -> (Result);
	submitAnswer : (Hash, AnswerKind) -> (Result);
	submitSkip : (Hash) -> (Result);
	submitWeight : (Hash, WeightKind) -> (Result);
	updateProfile : (User) -> (Result);
};
